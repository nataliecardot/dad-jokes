{"version":3,"sources":["retrieval-form.js","search-results.js","app.js","index.js"],"names":["RetrievalForm","props","react_default","a","createElement","Fragment","onSubmit","e","preventDefault","onFormSubmit","autoFocus","type","placeholder","onChange","onInputChange","target","value","required","searchTerm","disabled","isSearching","onClick","onRandomize","className","SearchResults","jokes","map","item","key","id","joke","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isFetchingJokes","isSearch","onSearchChange","bind","assertThisInitialized","randomizeJokes","searchJokes","_this2","setState","fetch","method","headers","Accept","then","response","json","_this3","concat","results","length","search_results","retrieval_form","jokeRender","Component","ReactDOM","render","src_app","document","getElementById"],"mappings":"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","file":"static/js/main.6d41fa9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst RetrievalForm = props => {\r\n  const onSubmit = e => {\r\n    // Prevents GET request/page refresh on submit\r\n    e.preventDefault();\r\n    props.onFormSubmit();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          autoFocus\r\n          type=\"text\"\r\n          placeholder=\"Enter search term...\"\r\n          onChange={e => props.onInputChange(e.target.value)}\r\n          required\r\n          value={props.searchTerm}\r\n        />\r\n        <div>\r\n          {/* Specifying type here since it's good practice; different browsers may use default types for buttons */}\r\n          <button type=\"submit\" disabled={props.isSearching}>Search</button>\r\n          {/* type=\"button\" stops input validation message from being displayed (on Firefox) when randomize button is clicked without anything entered */}\r\n          <button type=\"button\" onClick={props.onRandomize} disabled={props.isSearching} className=\"randomize-button\">\r\n            Randomize\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RetrievalForm;\r\n","import React from 'react';\r\n\r\nconst SearchResults = props => {\r\n\r\n  return (\r\n    <ul>\r\n      {props.jokes.map(item =>\r\n        <li key={item.id}>{item.joke}</li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import React, { Component } from 'react';\r\nimport RetrievalForm from './retrieval-form';\r\nimport SearchResults from './search-results';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      searchTerm: '',\r\n      jokes: [],\r\n      isFetchingJokes: false,\r\n      isSearch: false\r\n    };\r\n\r\n    this.onSearchChange = this.onSearchChange.bind(this);\r\n    this.randomizeJokes = this.randomizeJokes.bind(this);\r\n    this.searchJokes = this.searchJokes.bind(this);\r\n  }\r\n\r\n  randomizeJokes() {\r\n    this.setState({\r\n      isFetchingJokes: true,\r\n      isSearch: false\r\n    });\r\n\r\n    fetch(\r\n      'https://icanhazdadjoke.com/',\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          Accept: 'application/json'\r\n        }\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        let joke = json.joke;\r\n        this.setState({\r\n          joke,\r\n          isFetchingJokes: false,\r\n        });\r\n      });\r\n  }\r\n\r\n  searchJokes() {\r\n    // If nothing entered, user gets \"Please fill out this field\" message due to \"required\" attribute on input element\r\n    if (this.state.searchTerm !== '') {\r\n      this.setState({\r\n        isFetchingJokes: true,\r\n        isSearch: true\r\n      });\r\n\r\n      fetch(\r\n        `https://icanhazdadjoke.com/search?term=${this.state.searchTerm}&limit=50`,\r\n        {\r\n          method: 'GET',\r\n          headers: {\r\n            Accept: 'application/json'\r\n          }\r\n      })\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          let jokes = json.results;\r\n          this.setState({\r\n            jokes,\r\n            isFetchingJokes: false,\r\n            searchTerm: ''\r\n          });\r\n        });\r\n    }\r\n  }\r\n\r\n  onSearchChange(value) {\r\n    this.setState({ searchTerm: value });\r\n  }\r\n\r\n  jokeRender() {\r\n    return (\r\n      <div>\r\n        {(this.state.isSearch && this.state.jokes.length > 0) &&\r\n          <SearchResults\r\n            jokes={this.state.jokes}\r\n          />}\r\n        {(this.state.isSearch && this.state.jokes.length === 0) && <p className=\"no-results-msg\">Sorry, no results.</p>}\r\n        {!this.state.isSearch && <p className=\"random-joke\">{this.state.joke}</p>}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Dad Jokes</h1>\r\n        <RetrievalForm\r\n          onFormSubmit={this.searchJokes}\r\n          onInputChange={this.onSearchChange}\r\n          isSearching={this.state.isFetchingJokes}\r\n          onRandomize={this.randomizeJokes}\r\n          searchTerm={this.state.searchTerm}\r\n        />\r\n\r\n        {this.state.isFetchingJokes ? <p className=\"searching-msg\">Searching for jokes...</p> : this.jokeRender()}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app.css';\nimport App from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}